###############################################################################
#                          制作Linux Ramfs 指南                               #
#                           作者： 涂海波                                     #
#                           时间： 2018.08.08                                 #
###############################################################################

1.获取busybox源码

# 获取软件包名和版本
# package: 软件包名, 如 busybox
# version: 软件版本，如 busybox=1:1.22.0-15ubuntu1
$dpkg -l
... ...
||/ Name            Version             Architecture      Description
ii  busybox-static  1:1.22.0-15ubuntu1  amd64             Standalone rescue ...
... ...
$apt-get source busybox-static=1:1.22.0-15ubuntu1
... ...
正在读取软件包列表... 完成
... ...
dpkg-source: info: applying static-sh-alias.patch
... ...

# 如果提示"E: 您必须在 sources.list 中指定代码源(deb-src) URI",
# 则去掉sources.list 中deb-src注释符(#)
$sudo vim /etc/apt/sources.list
... ...
#deb-src http://cn.archive.ubuntu.com/ubuntu/ xenial main restricted
... ...
------------------------------------------------------------------->
... ...
deb-src http://cn.archive.ubuntu.com/ubuntu/ xenial main restricted
... ...

#更新apt配置
$apt update

2.编译busybox

#进入busybox源码目录
$make menuconfig
... ...
Busybox Settings --->
    Buildnone /proc
        [*] Build BusyBox as a static binary(no shared libs)

#编译
$make

#安装
$make install

3.制作ramfs镜像

#进入busybox 安装目录_install
$cd ./_install

#创建目录,其中x.x.x为配套kernel 版本，可通过uname -r命令查看，如4.9.0+
$mkdir proc sys dev etc ./etc/init.d lib/modules/x.x.x root

$vim ./etc/init.d/rcS
... ...
#!/bin/sh

# 将proc文件系统挂载到/proc目录，因为很多应用程序会使用到/proc中的信息，
# 不挂载会导致各种异常
mount -t proc none /proc

# 将sys文件系统挂载到/sys目录，因为很多应用程序会使用到/sys中的信息，
# 不挂载会导致各种异常
mount -t sysfs none /sys

# mdev是busybox自带的一个udev，用于系统启动和热插拔或动态加载驱动程序时，
# 自动产生设备节点，这句话如果不加上则需要手动mknod来挂载设备节点
/sbin/mdev -s

# 把/sbin/mdev写入/proc/sys/kernel/hotplug文件中
# 当有热插拔事件产生时，内核会调用/proc/sys/kernel/hotplug文件里面指定的应用程
# 序来处理热插拔事件
echo /sbin/mdev > /proc/sys/kernel/hotplug 
... ...

$chmod +x ./etc/init.d/rcS  

# 参考Erik Andersen 提供配置文件，创建inittab配置文件,
# 供init进程初始化使用
$vim ./etc/inittab
... ...
# /etc/inittab
#
# Copyright (C) 2001 Erik Andersen <andersen@codepoet.org>
#
# Note: BusyBox init doesn't support runlevels.  The runlevels field is
# completely ignored by BusyBox init. If you want runlevels, use
# sysvinit.
#
# Format for each entry: <id>:<runlevels>:<action>:<process>
#
# id        == tty to run on, or empty for /dev/console
# runlevels == ignored
# action    == one of sysinit, respawn, askfirst, wait, and once
# process   == program to run

# Startup the system
::sysinit:/bin/mount -t proc proc /proc
::sysinit:/bin/mount -o remount,rw /
::sysinit:/bin/mkdir -p /dev/pts /dev/shm
::sysinit:/bin/mount -a
::sysinit:/sbin/swapon -a

null::sysinit:/bin/ln -sf /proc/self/fd /dev/fd
null::sysinit:/bin/ln -sf /proc/self/fd/0 /dev/stdin
null::sysinit:/bin/ln -sf /proc/self/fd/1 /dev/stdout
null::sysinit:/bin/ln -sf /proc/self/fd/2 /dev/stderr
::sysinit:/bin/hostname -F /etc/hostname

# now run any rc scripts
::sysinit:/etc/init.d/rcS

# Put a getty on the serial port
# console::respawn:/sbin/getty -L  console 0 vt100 # GENERIC_SERIAL
# ttyS0::respawn:/sbin/getty -L ttyS0 115200 vt100 # GENERIC_SERIAL

# For root login without authentication
ttyS0::respawn:/bin/login -f root
console::respawn:/bin/login -f root

# Stuff to do for the 3-finger salute(ctrl + alt + del)
# ::ctrlaltdel:/sbin/reboot

# Stuff to do before rebooting
::shutdown:/etc/init.d/rcK
::shutdown:/sbin/swapoff -a
::shutdown:/bin/umount -a -r
... ...
# 创建group配置文件
$vim ./etc/group
... ...
root:x:0:
daemon:x:1:
bin:x:2:
sys:x:3:
adm:x:4:
tty:x:5:
disk:x:6:
lp:x:7:
mail:x:8:
kmem:x:9:
wheel:x:10:root
cdrom:x:11:
dialout:x:18:
floppy:x:19:
video:x:28:
audio:x:29:
tape:x:32:
www-data:x:33:
operator:x:37:
utmp:x:43:
plugdev:x:46:
staff:x:50:
lock:x:54:
netdev:x:82:
users:x:100:
nogroup:x:65534:
... ...

# 创建passwd配置文件
$vim ./etc/passwd
... ...
root:x:0:0:root:/root:/bin/sh
daemon:x:1:1:daemon:/usr/sbin:/bin/false
bin:x:2:2:bin:/bin:/bin/false
sys:x:3:3:sys:/dev:/bin/false
sync:x:4:100:sync:/bin:/bin/sync
mail:x:8:8:mail:/var/spool/mail:/bin/false
www-data:x:33:33:www-data:/var/www:/bin/false
operator:x:37:37:Operator:/var:/bin/false
nobody:x:65534:65534:nobody:/home:/bin/false
... ...
# 创建shadow配置文件
$vim ./etc/shadow
... ...
root::10933:0:99999:7:::
daemon:*:10933:0:99999:7:::
bin:*:10933:0:99999:7:::
sys:*:10933:0:99999:7:::
sync:*:10933:0:99999:7:::
mail:*:10933:0:99999:7:::
www-data:*:10933:0:99999:7:::
operator:*:10933:0:99999:7:::
nobody:*:10933:0:99999:7:::
... ...

# 通过cpio创建镜像
$find . | cpio -o --format=newc > rootfs.img

# 通过gzip创建zip镜像
$gzip -c rootfs.img > rootfs.img.bz

4.Qemu启动

#其中bzImage为内核镜像，rootfs.img.gz为制作romfs
$qemu -kernel $LINUX/arch/i386/boot/bzImage -initrd rootfs.img.bz -append
"root=/dev/ram rdinit=sbin/init noapic"

