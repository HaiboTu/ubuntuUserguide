###############################################################################
#                        Git Skill User Guide                             #
###############################################################################
1. Config the git color display.
$git config --global color.ui true

$git config --global user.email "xxx@xxx"

$git config --global user.name "xxx@xxx"

$git config --global core.editor vim

$git config --global commit.template "xxx"

$git config --global push.default simple

Address:https://git.oschina.net/progit/

2. Git tag command

#create tag v2.3
$git tag -a v2.3 -m "version 2.3(merge npt patches) released for ant financial services group"

#push tag to server
$git push origin v2.3

#delete the tag on the server
$git push origin --delete tag <tagname>

#show the local tag
$git show v2.3

#切换到某一版本(tag)
$git checkout -b feature-bugfix-v1.3 v1.3

#delete on tag
$git tag -d v2.4

3. Git clone
#git clone指定分支
$git clone -b branchA http://admin@192.168.1.101:7070/r/virtualbox_all_versions.git

4. Git 自动补全
a.查看git版本:
$git version
... ...
git version 2.7.3
... ...

b.获取git-completion.bash脚本，注意将下方链接的版本号改为和git版本一致。
$wget https://raw.githubusercontent.com/git/git/v2.7.4/contrib/completion/git-completion.bash
... ...
--2021-04-25 22:52:53--  https://raw.githubusercontent.com/git/git/v2.7.4/contrib/completion/git-completion.bash
...
2021-04-25 22:52:56 (656 KB/s) - ‘git-completion.bash’ saved [57390/57390]
... ...

c.将步骤2中内容粘贴至:
$mv git-completion.bash ~/.git-completion.bash

d.编辑~/.bashrc文件，添加一下内容:
$vim ~/.bashrc
... ...
if [ -f ~/.git-completion.bash  ]; then
    . ~/.git-completion.bash
fi
... ...

e.更新环境变量:
$source ~/.bashrc

5. git 查看修改文件
$git log --name-status CommitID

6. git 分支命名规范

a.master（主分支，永远是可用的、稳定的、可直接发布的版本，不能直接在该分支上开发）

b.develop（开发主分支，代码永远是最新，所有新功能以这个分支来创建自己的开发分支，该分支只做只合并操作，不能直接在该分支上开发）

c.feature-xxx（功能开发分支，在develop上创建分支，以自己开发功能模块命名，功能测试正常后合并到develop分支）

d.release(预分布分支，在合并好feature分支的develop分支上创建，主要是用来测试bug的分支，修改好bug并确定稳定之后合并到develop和master分支，然后发布master分支)

e.release-fix(功能bug修复分支，在release上创建分支修复，修复好测试出来的bug之后合并回release分支。)

f.hotfix-xxx（紧急bug修改分支，项目上线之后可以会遇到一些环境问题需要紧急修复，在master分支上创建，流程跟release分支相似，修复完成后合并到develop和master分支）

注意事项：
一个分支尽量开发一个功能模块，不要多个功能模块在一个分支上开发。
开发过程中，如果组员A开发的功能依赖组员B正在开发的功能，可以待组员B开发好相关功能之后，组员A直接pull组员B的分支下来开发，不需要先将组员B的分支merge 到develop分支。
feature 分支在申请合并之前，最好是先 pull 一下 develop主分支下来，看一下有没有冲突，如果有就先解决冲突后再申请合并。

7. git bisect 二分查找定位分析
a.设定正确提交patch和发现bug patch，开始二分查找定位
$git bisect start [start commit id] [end commit id]
b.根据git bisect结果，进行测试，并通过git bisect good/bad进行标记
$git bisect good/bad
...
b47892 is the first bad commit
...
c.定位出错提交，分析原因，并恢复debug之前提交，分析结束
$git bisect reset

